function project3

%Using climatic tool box to load sea surface temperature readings for
%cyclones

lat = ncread('ERA_Interim_2017.nc','latitude');
lon = ncread('ERA_Interim_2017.nc','longitude');
T = ncread('ERA_Interim_2017.nc','t2m');

T = flipud(rot90(T));
T_harvey= T(:,:,8);
T_maria=T(:,:,9);
T_ophelia=T(:,:,10);
T_cindy=T(:,:,6);

% Image for Harvey_August
figure (1)
imagesc(lon,lat,T_harvey)
axis xy
[Lon,Lat] = meshgrid(lon,lat);
pcolor(double(Lon),double(Lat),T_harvey)
shading interp % eliminates black lines between grid cells
cmocean thermal % cold-to-hot colormap
xlabel Longitude
ylabel Latitude

[Lat,Lon,T,T_harvey] = recenter(Lat,Lon,T,T_harvey);

pcolor(double(Lon),double(Lat),T_harvey)
shading interp % eliminates black lines between grid cells
hold on
borders('countries','color',rgb('dark gray'))
cmocean thermal % cold-to-hot colormap
xlabel Longitude
ylabel Latitude
title 'Sea Surface Temerature Harvey August'
colorbar

% Image for Maria_September
figure (2)
imagesc(lon,lat,T_maria)
axis xy
[Lon,Lat] = meshgrid(lon,lat);
pcolor(double(Lon),double(Lat),T_maria)
shading interp % eliminates black lines between grid cells
cmocean thermal % cold-to-hot colormap
xlabel Longitude
ylabel Latitude

[Lat,Lon,T,T_maria] = recenter(Lat,Lon,T,T_maria);

pcolor(double(Lon),double(Lat),T_maria)
shading interp % eliminates black lines between grid cells
hold on
borders('countries','color',rgb('dark gray'))
cmocean thermal % cold-to-hot colormap
xlabel Longitude
ylabel Latitude
title 'Sea Surface Temerature Maria September'
colorbar

% Image for Ophelia_october
figure (3)
imagesc(lon,lat,T_ophelia)
axis xy
[Lon,Lat] = meshgrid(lon,lat);
pcolor(double(Lon),double(Lat),T_ophelia)
shading interp % eliminates black lines between grid cells
cmocean thermal % cold-to-hot colormap
xlabel Longitude
ylabel Latitude

[Lat,Lon,T,T_ophelia] = recenter(Lat,Lon,T,T_ophelia);

pcolor(double(Lon),double(Lat),T_ophelia)
shading interp % eliminates black lines between grid cells
hold on
borders('countries','color',rgb('dark gray'))
cmocean thermal % cold-to-hot colormap
xlabel Longitude
ylabel Latitude
title 'Sea Surface Temerature Ophelia October'
colorbar

% Image for cindy_June
figure (4)
imagesc(lon,lat,T_cindy)
axis xy
[Lon,Lat] = meshgrid(lon,lat);
pcolor(double(Lon),double(Lat),T_cindy)
shading interp % eliminates black lines between grid cells
cmocean thermal % cold-to-hot colormap
xlabel Longitude
ylabel Latitude

[Lat,Lon,T,T_cindy] = recenter(Lat,Lon,T,T_cindy);

pcolor(double(Lon),double(Lat),T_cindy)
shading interp % eliminates black lines between grid cells
hold on
borders('countries','color',rgb('dark gray'))
cmocean thermal % cold-to-hot colormap
xlabel Longitude
ylabel Latitude
title 'Sea Surface Temerature Cindy June'
colorbar

% Using the equation of work we calculate the work that is done by the
% Hurricane and plot the same

density = 1.225;
rad_hurr=[400000 500000 600000 700000 800000];
area_hurr=zeros(size(rad_hurr));

for i=1:size(rad_hurr,2)
    area_hurr(1,i)=rad_hurr(1,i)*rad_hurr(1,i)*pi;
end

wind_velocity=[50 60 70 80];

%K is the relative efficiency factor

k_rel_eff = 0.01;
T_surface=[300 301 302 303 304 305];
T_tropo=200;
he=zeros(size(T_surface));
hs=zeros(size(T_surface));
for i=1:size(T_surface,2)
    he(1,i)=IdealAir(T_surface(1,i),'T','h');
    hs(1,i)=IdealAir(T_surface(1,i)-10,'T','h');
end

m=1;
work_done=zeros(1,120);
for i=1:(size(area_hurr,2))
    for j=1:(size(T_surface,2))
        for k =1:(size(wind_velocity,2))
            work_done(1,m)=density*area_hurr(1,i)*k_rel_eff*0.1*(he(1,j)-hs(1,j))*(1-(T_tropo/T_surface(1,j)))*wind_velocity(1,k);
            m=m+1;
        end
    end
end

iter_number=1:1:120;

figure (5)
plot(iter_number,work_done,'-r')
hold on 
xlabel 'Number of Iterations'
ylabel 'Power Generated in KW'
title 'Power of a cyclone Calculated' 


end

function Output=IdealAir(xi,prop1,prop2,unit)
%	======================================================
%
% This program interpolates air properties following the Ideal Gas Law from
% the gas table A22 and A22e in the textbook Fundamentals of Engineering
% Thermodynamics by Moran, Shapiro (6th edition)
%
% Input parameters explained:
%   xi: The known parameter, related to property prop1.  Can be a single
%       integer or a 1-dimensional matrix
%   prop1: The known property, related to xi
%   prop2: The unknown quantity searched for, related to output desired
%   unit: unit system used, either 'si' for SI units or 'eng' for english
%         units.  This is OPTIONAL!  Leave blank for SI units.
%
% Properties valid for prop1 and prop2
% 	prop* 	| units (si)  | units (eng)     | Description
%	------------------------------------------------
%	T		| K           | R               | Temperature
%	h		| kJ/kg       | Btu/lbm         | Enthalpy
%	u		| kJ/kg       | Btu/lbm         | Internal Energy
%	pr		| -           | -               | Relative Pressure
%	vr		| -           | -               | Relative Volume
%	so		| kJ/(kg*K)   | Btu/(lbm*R)     | Entropy
%
% Examples of the program in use:
%   Input:  IdealAir(2.5,'so','h')
%   Output: h = 664.0107
%
%	Input:  IdealAir([632,1100,1987],'T','so','eng')
%   Output: so = 0.63853     0.77422     0.93023
%
% Written by Jared Miller for Professor Kevin Cole
% Last modified: August 14, 2009
% -Added "load *.mat" function in place of excel reading
% -Made units optional, default to si
%
%	======================================================

%Checks to see the units asked for, then opens the file with appropriate
%units.  If the units are undefined, the program defaults to SI units.
unittest=exist('unit','var');
if unittest==0
    load a22si.mat x
else
if strcmp(unit,'si')==1
    load a22si.mat x
elseif strcmp(unit,'eng')==1
    load a22eng.mat x
else
    error('Units not specified correctly.  Valid entries: si,eng (lower case) or leave blank for default si')
end
end
temp=x;

%Check to see which properties are being asked for and then picks the right
%range for x and y.
if strcmp(prop1,'T')==1
    x=temp(:,1);
elseif strcmp(prop1,'h')==1
    x=temp(:,2);
elseif strcmp(prop1,'pr')==1
    x=temp(:,3);
elseif strcmp(prop1,'u')==1
    x=temp(:,4);
elseif strcmp(prop1,'vr')==1
    x=temp(:,5);
elseif strcmp(prop1,'so')==1
    x=temp(:,6);   
else
    error('Prop1 not specified correctly.  Valid entries: T,h,u,pr,vr,so (case sensitive)')
end
if strcmp(prop2,'T')==1
    y=temp(:,1);
elseif strcmp(prop2,'h')==1
    y=temp(:,2);
elseif strcmp(prop2,'pr')==1
    y=temp(:,3);
elseif strcmp(prop2,'u')==1
    y=temp(:,4);
elseif strcmp(prop2,'vr')==1
    y=temp(:,5);
elseif strcmp(prop2,'so')==1
    y=temp(:,6);   
else
    error('Prop2 not specified correctly.  Valid entries: T,h,u,pr,vr,so (case sensitive)')    
end
    
%checks to see that xi lies within the valid range of x
xmax=max(x);
xmin=min(x);
ximax=max(xi);
ximin=min(xi);
if ximax>xmax
    str = num2str(xmax);
    str2 = num2str(ximax);
    error([prop1,' value (',str2,') is too large.  Maximum ',prop1,' value is ',str])       
elseif ximin<xmin
    str = num2str(xmin);   
    str2 = num2str(ximin);
    error([prop1,' value (',str2,') is too small.  Minimum ',prop1,' value is ',str])   
end    

%Interpolates using built-in MATALB interpolate function, interp1
Output=interp1(x,y,xi);

%displays on screen (optional step)
    %disp([prop2,' = ',num2str(Output)]);
end 
